using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libfigtree"], :libfigtree),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/pseastham/StokesParticlesBuilder/releases/download/v0.1-alpha"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/StokesParticlesBuilder.v1.0.0.aarch64-linux-gnu.tar.gz", "6d7e172222518f3bd4491ad3e4d4a1e5b2cf4bdcff7f1e84bf9218c2fa542fea"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/StokesParticlesBuilder.v1.0.0.aarch64-linux-musl.tar.gz", "e9155c27d8a18d4b4a3139e716dae13cc5fd5257ac164e8b6e45da4498ee745c"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/StokesParticlesBuilder.v1.0.0.arm-linux-gnueabihf.tar.gz", "0c5b73acc5dea79b2defe6d8350219cbde5330bdc2d6f7cbbd9de566ae5db00a"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/StokesParticlesBuilder.v1.0.0.arm-linux-musleabihf.tar.gz", "ad379ae599481bfaae10dc33f45bd8ccb9c246414b980403dea0c026ca8fa622"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/StokesParticlesBuilder.v1.0.0.i686-linux-gnu.tar.gz", "5dd50a6d2c8ad74d7e0a4cfa55fcea1e7beb91562c28d6408833d3428f606d12"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/StokesParticlesBuilder.v1.0.0.i686-linux-musl.tar.gz", "a9ffeb3e19fe36782642a31f899d81407c0fc96680ba7c50a66aaf195cfa8b66"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/StokesParticlesBuilder.v1.0.0.powerpc64le-linux-gnu.tar.gz", "d0b4506b48cb095095b1e27065b334b8847f882b2f5cdfb284f50c864695b6de"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/StokesParticlesBuilder.v1.0.0.x86_64-linux-gnu.tar.gz", "f9cde2899c679c3d6e813773c32d1dbbe5de3ace1a7866cdf6437cc006150f04"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/StokesParticlesBuilder.v1.0.0.x86_64-linux-musl.tar.gz", "ee54105ac94daedca3334151d13eb18813b21480fe031acf7d04a711553eb491"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
